/***********************************************************************************
          _ _            _   _       _   _           
    /\   | | |          | \ | |     | | (_)          
   /  \  | | |_ ___ _ __|  \| | __ _| |_ ___   _____ 
  / /\ \ | | __/ _ \ '__| . ` |/ _` | __| \ \ / / _ \
 / ____ \| | ||  __/ |  | |\  | (_| | |_| |\ V /  __/
/_/    \_\_|\__\___|_|  |_| \_|\__,_|\__|_| \_/ \___|
-----------------------------------------------------

This code has been generated by AlterNative translator

Permission is hereby granted, free of charge, to any person obtaining a copy of this
code.

   contact: alejandro.albala@upc.edu
   web: http://alexalbala.github.io/Alter-Native/
   github: https://github.com/AlexAlbala/Alter-Native
   
AlterNative @ 2014

***********************************************************************************/

#include "UnsafeTest.h"
namespace Unsafe {
	void UnsafeTest::Copy(Array<char>* src, int srcIndex, Array<char>* dst, int dstIndex, int count){
		if (src == null || srcIndex < 0 || dst == null || dstIndex < 0 || count < 0){
			throw new ArgumentException();
		}
		int srcLen = src->Length;
		int dstLen = dst->Length;
		if (srcLen - srcIndex < count || dstLen - dstIndex < count) {
			throw new ArgumentException();
		}
		//Fixed statement ignored
		char*pSrc = *src, *pDst = *dst;

		//Start fixed block
		char* ps = pSrc;
		char* pd = pDst;
		for (int i = 0; i < count / 4; i += 1){
			*(int*)(pd) = *(int*)(ps);
			pd += (IntPtr)(4) / 1;
			ps += (IntPtr)(4) / 1;
		}
		for (int i = 0; i < count % 4; i += 1) {
			*pd = *ps;
			pd += (IntPtr)(1) / 1;
			ps += (IntPtr)(1) / 1;
		}
		//End fixed block
	}
	void UnsafeTest::Main(String* args[])
	{
		Array<char>* a = new Array<char>(100);
		Array<char>* b = new Array<char>(100);
		for (int i = 0; i < 100; i += 1) {
			a->SetData(i, (char)(i));
		}
		UnsafeTest::Copy(a, 0, b, 0, 100);
		Console::WriteLine(new String("The first 10 elements are:"));
		for (int i = 0; i < 10; i += 1) {
			Console::Write((int)(b->GetData(i)));
			Console::Write(new String(" "));
		}
		Console::WriteLine(new String("\n"));
	}

}
