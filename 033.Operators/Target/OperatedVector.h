/***********************************************************************************
          _ _            _   _       _   _           
    /\   | | |          | \ | |     | | (_)          
   /  \  | | |_ ___ _ __|  \| | __ _| |_ ___   _____ 
  / /\ \ | | __/ _ \ '__| . ` |/ _` | __| \ \ / / _ \
 / ____ \| | ||  __/ |  | |\  | (_| | |_| |\ V /  __/
/_/    \_\_|\__\___|_|  |_| \_|\__,_|\__|_| \_/ \___|
-----------------------------------------------------

This code has been generated by AlterNative translator

Permission is hereby granted, free of charge, to any person obtaining a copy of this
code.

   contact: alejandro.albala@upc.edu
   web: http://alexalbala.github.io/Alter-Native/
   github: https://github.com/AlexAlbala/Alter-Native
   
AlterNative @ 2014

***********************************************************************************/

#pragma once
#include <System/System.h>

using namespace System;
namespace Operators {
	class OperatedVector : public virtual Object
	{
		public:
			int DimSize;
		private:
			Array<float>* m_array;
		public:
			void SetData(int x, float value);
		public:
			float GetData(int x);
		public:
		OperatedVector* operator +(OperatedVector mat2) {
			OperatedVector* newMatrix = new OperatedVector();
			for (int x = 0; x < 3; x += 1) {
				newMatrix->SetData(x, this->GetData(x) + mat2.GetData(x));
			}
			return newMatrix;
		}
		public:
			OperatedVector();
	};
}
