/***********************************************************************************
          _ _            _   _       _   _           
    /\   | | |          | \ | |     | | (_)          
   /  \  | | |_ ___ _ __|  \| | __ _| |_ ___   _____ 
  / /\ \ | | __/ _ \ '__| . ` |/ _` | __| \ \ / / _ \
 / ____ \| | ||  __/ |  | |\  | (_| | |_| |\ V /  __/
/_/    \_\_|\__\___|_|  |_| \_|\__,_|\__|_| \_/ \___|
-----------------------------------------------------

This code has been generated by AlterNative translator

Permission is hereby granted, free of charge, to any person obtaining a copy of this
code.

   contact: alejandro.albala@upc.edu
   web: http://alexalbala.github.io/Alter-Native/
   github: https://github.com/AlexAlbala/Alter-Native
   
AlterNative @ 2014

***********************************************************************************/

#include "Program.h"
namespace InterClassBoxing {
	void Program::Case1(){
		Container_T<int>* a = new Container_T<int>();
		int i = 5;
		a->Set(i);
		int j = a->Get();
		Console::WriteLine(j);
	}
	void Program::Case2()
	{
		Container_T<int>* a = new Container_T<int>();
		Object* i = BOX<int>(5);
		a->Set(UNBOX<int>(i));
		Object* j = BOX<int>(a->Get());
		Console::WriteLine(j);
	}
	void Program::Case3()
	{
		Container_T<Object>* a = new Container_T<Object>();
		int i = 5;
		a->Set(BOX<int>(i));
		int j = UNBOX<int>(a->Get());
		Console::WriteLine(j);
	}
	void Program::Case4()
	{
		Container_T<Object>* a = new Container_T<Object>();
		Object* i = BOX<int>(5);
		a->Set(i);
		Object* j = a->Get();
		Console::WriteLine(j);
	}
	void Program::Main(Array<String>* args)
	{
		Program::Case1();
		Program::Case2();
		Program::Case3();
		Program::Case4();
	}

}
