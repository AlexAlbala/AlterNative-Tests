/***********************************************************************************
          _ _            _   _       _   _           
    /\   | | |          | \ | |     | | (_)          
   /  \  | | |_ ___ _ __|  \| | __ _| |_ ___   _____ 
  / /\ \ | | __/ _ \ '__| . ` |/ _` | __| \ \ / / _ \
 / ____ \| | ||  __/ |  | |\  | (_| | |_| |\ V /  __/
/_/    \_\_|\__\___|_|  |_| \_|\__,_|\__|_| \_/ \___|
-----------------------------------------------------

This code has been generated by AlterNative translator

Permission is hereby granted, free of charge, to any person obtaining a copy of this
code.

   contact: alejandro.albala@upc.edu
   web: http://alexalbala.github.io/Alter-Native/
   github: https://github.com/AlexAlbala/Alter-Native
   
AlterNative @ 2014

***********************************************************************************/

#include "MatrixTest.h"
namespace Operators {
	Random* MatrixTest::m_rand = new Random();
	void MatrixTest::Main(){
		OperatedVector* mat = new OperatedVector();
		OperatedVector* mat2 = new OperatedVector();
		MatrixTest::InitMatrix(mat, (float)3);
		MatrixTest::InitMatrix(mat2, (float)5.2);
		Console::WriteLine(new String("Vector 1: "));
		MatrixTest::PrintMatrix(mat);
		Console::WriteLine(new String("Vector 2: "));
		MatrixTest::PrintMatrix(mat2);
		OperatedVector* mat3 = *mat + *mat2;
		Console::WriteLine();
		Console::WriteLine(new String("Vector 1 + Vector 2 = "));
		MatrixTest::PrintMatrix(mat3);
	}
	void MatrixTest::InitMatrix(OperatedVector* mat, float f)
	{
		for (int x = 0; x < 3; x += 1) {
			mat->SetData(f, x);
		}
	}
	void MatrixTest::PrintMatrix(OperatedVector* mat)
	{
		Console::WriteLine();
		Console::Write(new String("[ "));
		for (int x = 0; x < 3; x += 1) {
			Console::Write(mat->GetData(x));
			if (x < 2) {
				Console::Write(new String(", "));
			}
		}
		Console::WriteLine(new String(" ]"));
		Console::WriteLine();
	}

}
